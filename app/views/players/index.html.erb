<div class="container mx-auto py-6">
  <div class="flex flex-col lg:flex-row justify-between items-start lg:items-center mb-6 space-y-4 lg:space-y-0">
    <h1 class="text-2xl lg:text-3xl font-bold text-slate-100 flex items-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-3 text-red-500 info-icon" viewBox="0 0 20 20" fill="currentColor" style="filter: drop-shadow(0 0 3px #f87171);">
        <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
      </svg>
      Jugadores de Smash
    </h1>
    
    <div class="flex flex-col sm:flex-row gap-2 w-full lg:w-auto">
      <%= link_to tournaments_path, 
                class: "inline-flex items-center px-3 sm:px-4 py-2 border border-blue-600 text-sm font-medium rounded-md shadow-sm text-blue-400 bg-slate-800 hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200 cursor-pointer" do %>
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 sm:h-3 sm:w-3 sm:mr-2" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z" clip-rule="evenodd" />
        </svg>
        <span class="hidden sm:inline">Ver Torneos</span>
        <span class="sm:hidden">Torneos</span>
      <% end %>
    </div>
  </div>

  <!-- Filtros y Búsqueda -->
  <div class="mb-6 bg-slate-800 rounded-lg shadow-md border border-slate-600 p-5">
    <%= form_with(url: players_path, method: :get, local: false, data: { controller: "search" }) do |f| %>
      <!-- Búsqueda por texto -->
      <div class="relative mb-4">
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-slate-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
          </svg>
        </div>
        <%= f.text_field :query, 
                      value: @query, 
                      placeholder: "Buscar por nombre, tag o Twitter...", 
                      class: "pl-10 focus:ring-red-500 focus:border-red-500 block w-full shadow-sm text-sm border-slate-600 bg-slate-700 text-slate-200 rounded-md py-3 tracking-wide",
                      autocomplete: "off",
                      data: { 
                        search_target: "input",
                        action: "input->search#inputChanged"
                      } %>
        <% if @query.present? %>
          <div class="absolute inset-y-0 right-0 pr-3 flex items-center">
            <%= link_to players_path, class: "text-slate-400 hover:text-slate-300 cursor-pointer" do %>
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
              </svg>
            <% end %>
          </div>
        <% end %>
      </div>

      <!-- Filtros y Ordenamiento -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
        <!-- Filtro por Personaje -->
        <div>
          <label class="block text-xs font-medium text-slate-300 mb-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 inline mr-1" viewBox="0 0 20 20" fill="currentColor">
              <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            Filtrar por Personaje
          </label>
          <%= f.select :character_filter, 
                options_for_select([
                  ['Todos los jugadores', ''],
                  ['Sin personajes asignados', 'none']
                ] + smash_character_options, @character_filter),
                {},
                {
                  class: "w-full bg-slate-700 border border-slate-600 text-slate-200 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
                  data: { 
                    search_target: "filter",
                    action: "change->search#selectChanged"
                  }
                } %>
          <% if @character_filter.present? %>
            <div class="mt-1 text-xs text-blue-400">
              <% if @character_filter == 'none' %>
                📝 Mostrando jugadores sin personajes asignados
              <% else %>
                🎮 Mostrando jugadores que usan: <%= Player::SMASH_CHARACTERS[@character_filter] %>
              <% end %>
            </div>
          <% end %>
        </div>

        <!-- Filtro por Equipo -->
        <div>
          <label class="block text-xs font-medium text-slate-300 mb-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 inline mr-1" viewBox="0 0 20 20" fill="currentColor">
              <path d="M17 20a2 2 0 002-2V6a2 2 0 00-2-2h-3a2 2 0 00-2-2H8a2 2 0 00-2 2H3a2 2 0 00-2 2v12a2 2 0 002 2h14zM3 6h2V4h2v2h6V4h2v2h2v12H3V6z" />
            </svg>
            Filtrar por Equipo
          </label>
          <%= f.select :team_filter, 
                options_for_select([
                  ['Todos los jugadores', ''],
                  ['Sin equipo asignado', 'none']
                ] + team_options, @team_filter),
                {},
                {
                  class: "w-full bg-slate-700 border border-slate-600 text-slate-200 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-green-500 focus:border-green-500",
                  data: { 
                    search_target: "filter",
                    action: "change->search#selectChanged"
                  }
                } %>
          <% if @team_filter.present? %>
            <div class="mt-1 text-xs text-green-400">
              <% if @team_filter == 'none' %>
                👥 Mostrando jugadores sin equipo asignado
              <% else %>
                🏆 Mostrando jugadores del equipo: <%= Team.find(@team_filter).display_name rescue @team_filter %>
              <% end %>
            </div>
          <% end %>
        </div>

        <!-- Filtro por País -->
        <div>
          <label class="block text-xs font-medium text-slate-300 mb-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 inline mr-1" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M3 6a3 3 0 013-3h10a1 1 0 01.8 1.6L14.25 8l2.55 3.4A1 1 0 0116 13H6a1 1 0 00-1 1v3a1 1 0 11-2 0V6z" clip-rule="evenodd" />
            </svg>
            Filtrar por País
          </label>
          <%= f.select :country_filter, 
                options_for_select([
                  ['Todos los países', ''],
                  ['Sin país asignado', 'none']
                ] + country_options, @country_filter),
                {},
                {
                  class: "w-full bg-slate-700 border border-slate-600 text-slate-200 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500",
                  data: { 
                    search_target: "filter",
                    action: "change->search#selectChanged"
                  }
                } %>
          <% if @country_filter.present? %>
            <div class="mt-1 text-xs text-yellow-400">
              <% if @country_filter == 'none' %>
                🌍 Mostrando jugadores sin país asignado
              <% else %>
                🌍 Mostrando jugadores de: <%= @country_filter %>
              <% end %>
            </div>
          <% end %>
        </div>

        <!-- Ordenamiento -->
        <div>
          <label class="block text-xs font-medium text-slate-300 mb-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 inline mr-1" viewBox="0 0 20 20" fill="currentColor">
              <path d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 8a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 12a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 16a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" />
            </svg>
            Ordenar por
          </label>
          <%= f.select :sort_by, 
                options_for_select([
                  ['📅 Último torneo', 'recent_tournament'],
                  ['📅 Primer torneo', 'oldest_tournament'],
                  ['🎯 Más eventos', 'events_count_desc'],
                  ['🎯 Menos eventos', 'events_count_asc'],
                  ['🏆 Más torneos', 'tournaments_count_desc'],
                  ['🏆 Menos torneos', 'tournaments_count_asc'],
                  ['🔤 Tag A-Z', 'tag_asc'],
                  ['🔤 Tag Z-A', 'tag_desc']
                ], @sort_by || 'recent_tournament'),
                {},
                {
                  class: "w-full bg-slate-700 border border-slate-600 text-slate-200 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:border-purple-500",
                  data: { 
                    search_target: "sort",
                    action: "change->search#selectChanged"
                  }
                } %>
          <% if @sort_by.present? && @sort_by != 'recent_tournament' %>
            <div class="mt-1 text-xs text-purple-400">
              📊 Ordenado por: <%= @sort_by.humanize %>
            </div>
          <% end %>
        </div>
      </div>

      <!-- Botones de acción y estadísticas -->
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
        <div class="flex items-center space-x-2">
          <%= link_to players_path, 
                class: "inline-flex items-center px-3 py-2 border border-slate-500 text-slate-300 bg-slate-700 rounded-md hover:bg-slate-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-slate-500 transition-colors text-xs",
                title: "Limpiar todos los filtros" do %>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
            </svg>
            Limpiar Filtros
          <% end %>
          
          <button type="button" 
                  onclick="toggleFiltersHelp()" 
                  class="inline-flex items-center px-3 py-2 border border-blue-500 text-blue-400 bg-slate-700 rounded-md hover:bg-slate-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors text-xs"
                  title="Ayuda sobre filtros">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
            </svg>
            Ayuda
          </button>
        </div>

        <!-- Estadísticas rápidas -->
        <div class="text-xs text-slate-400 flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-2" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
          </svg>
          <span class="tracking-wide">Los filtros se aplican automáticamente</span>
        </div>
      </div>

      <!-- Ayuda de filtros (oculta por defecto) -->
      <div id="filtersHelp" class="hidden bg-slate-700 rounded-md p-4 mt-4 text-xs text-slate-300 border border-slate-600">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <div>
            <strong class="text-slate-200 flex items-center mb-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" viewBox="0 0 20 20" fill="currentColor">
                <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Filtro por Personaje:
            </strong>
            <ul class="space-y-1 text-slate-400 ml-4">
              <li>• <strong>Todos:</strong> Muestra todos los jugadores registrados</li>
              <li>• <strong>Sin personajes:</strong> Solo jugadores sin personajes asignados</li>
              <li>• <strong>Personaje específico:</strong> Jugadores que usan ese personaje como principal, secundario o terciario</li>
            </ul>
          </div>
          <div>
            <strong class="text-slate-200 flex items-center mb-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" viewBox="0 0 20 20" fill="currentColor">
                <path d="M17 20a2 2 0 002-2V6a2 2 0 00-2-2h-3a2 2 0 00-2-2H8a2 2 0 00-2 2H3a2 2 0 00-2 2v12a2 2 0 002 2h14zM3 6h2V4h2v2h6V4h2v2h2v12H3V6z" />
              </svg>
              Filtro por Equipo:
            </strong>
            <ul class="space-y-1 text-slate-400 ml-4">
              <li>• <strong>Todos:</strong> Muestra todos los jugadores</li>
              <li>• <strong>Sin equipo:</strong> Solo jugadores sin equipo asignado</li>
              <li>• <strong>Equipo específico:</strong> Jugadores que pertenecen a ese equipo (principal o secundario)</li>
            </ul>
          </div>
          <div>
            <strong class="text-slate-200 flex items-center mb-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M3 6a3 3 0 013-3h10a1 1 0 01.8 1.6L14.25 8l2.55 3.4A1 1 0 0116 13H6a1 1 0 00-1 1v3a1 1 0 11-2 0V6z" clip-rule="evenodd" />
              </svg>
              Filtro por País:
            </strong>
            <ul class="space-y-1 text-slate-400 ml-4">
              <li>• <strong>Todos:</strong> Muestra jugadores de todos los países</li>
              <li>• <strong>Sin país:</strong> Solo jugadores sin país asignado</li>
              <li>• <strong>País específico:</strong> Jugadores de ese país (se muestra la cantidad entre paréntesis)</li>
            </ul>
          </div>
          <div>
            <strong class="text-slate-200 flex items-center mb-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" viewBox="0 0 20 20" fill="currentColor">
                <path d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 8a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 12a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 16a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" />
              </svg>
              Opciones de Ordenamiento:
            </strong>
            <ul class="space-y-1 text-slate-400 ml-4">
              <li>• <strong>Por eventos:</strong> Cantidad de eventos en los que ha participado</li>
              <li>• <strong>Por torneos:</strong> Cantidad de torneos únicos</li>
              <li>• <strong>Por fecha:</strong> Fecha de última o primera inscripción en torneo</li>
              <li>• <strong>Por tag:</strong> Orden alfabético del nombre de jugador</li>
            </ul>
          </div>
        </div>
        <div class="mt-3 pt-3 border-t border-slate-600 text-slate-400">
          <strong class="text-slate-300">💡 Tip:</strong> Puedes combinar la búsqueda por texto con los filtros para encontrar jugadores específicos más rápido.
        </div>
      </div>
    <% end %>
  </div>

  <%= render "players_list", players: @players %>
</div>

<!-- Modal para editar personajes de Smash (fuera del turbo frame) -->
<div id="smashCharacterModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-[9999] flex items-center justify-center" style="z-index: 9999;">
  <div class="bg-slate-800 rounded-lg shadow-xl border border-slate-600 p-6 w-full max-w-7xl mx-4 relative z-[10000] max-h-[90vh] overflow-y-auto" style="z-index: 10000;">
    <div class="flex justify-between items-center mb-6">
      <h3 class="text-xl font-semibold text-slate-100">Editar Personajes de Smash</h3>
      <button onclick="closeSmashCharacterModal()" class="text-slate-400 hover:text-slate-200 p-1">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    
    <form id="smashCharacterForm" class="space-y-4">
      <input type="hidden" id="playerId" name="player_id">
      
      <!-- Grid horizontal de 3 personajes -->
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        
        <!-- Personaje 1 -->
        <div class="p-4 bg-slate-700 rounded-lg">
          <h4 class="text-base font-medium text-slate-200 mb-4 flex items-center justify-center">
            <span class="bg-red-600 text-white w-7 h-7 rounded-full flex items-center justify-center text-sm font-bold mr-2">1</span>
            Principal
          </h4>
          
          <!-- Vista previa del personaje seleccionado -->
          <div id="character_1_preview" class="mb-4 p-3 bg-slate-600 rounded-lg hidden">
            <div class="flex flex-col items-center space-y-2">
              <div id="character_1_icon" class="flex-shrink-0"></div>
              <div class="text-center">
                <p id="character_1_name" class="text-slate-200 font-medium text-sm"></p>
                <p id="character_1_skin_text" class="text-slate-400 text-xs"></p>
              </div>
            </div>
          </div>
          
          <div class="space-y-3">
            <div>
              <label class="block text-xs font-medium text-slate-200 mb-1">Personaje</label>
              <select id="character_1" name="character_1" class="w-full bg-slate-600 border border-slate-500 text-slate-200 rounded-md px-2 py-2 text-sm focus:ring-2 focus:ring-red-500 focus:border-red-500" onchange="updateCharacterPreview(1)">
                <option value="">Seleccionar...</option>
                <% smash_character_options.each do |name, key| %>
                  <option value="<%= key %>"><%= name %></option>
                <% end %>
              </select>
            </div>
            <div>
              <label class="block text-xs font-medium text-slate-200 mb-1">Skin</label>
              <select id="skin_1" name="skin_1" class="w-full bg-slate-600 border border-slate-500 text-slate-200 rounded-md px-2 py-2 text-sm focus:ring-2 focus:ring-red-500 focus:border-red-500 mb-2" onchange="updateCharacterPreview(1)">
                <% smash_skin_options.each do |name, value| %>
                  <option value="<%= value %>"><%= name %></option>
                <% end %>
              </select>
              
              <!-- Mini galería de skins -->
              <div id="skins_gallery_1" class="hidden">
                <p class="text-xs text-slate-400 mb-1">Skins:</p>
                <div class="grid grid-cols-4 gap-1">
                  <% (1..8).each do |skin_num| %>
                    <button type="button" 
                            class="skin-selector border-2 border-transparent hover:border-red-400 rounded p-1 transition-colors" 
                            data-character-slot="1" 
                            data-skin="<%= skin_num %>"
                            onclick="selectSkin(1, <%= skin_num %>)">
                      <div class="w-6 h-6 bg-slate-600 rounded border skin-icon-<%= skin_num %>"></div>
                    </button>
                  <% end %>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Personaje 2 -->
        <div class="p-4 bg-slate-700 rounded-lg">
          <h4 class="text-base font-medium text-slate-200 mb-4 flex items-center justify-center">
            <span class="bg-blue-600 text-white w-7 h-7 rounded-full flex items-center justify-center text-sm font-bold mr-2">2</span>
            Secundario
          </h4>
          
          <!-- Vista previa del personaje seleccionado -->
          <div id="character_2_preview" class="mb-4 p-3 bg-slate-600 rounded-lg hidden">
            <div class="flex flex-col items-center space-y-2">
              <div id="character_2_icon" class="flex-shrink-0"></div>
              <div class="text-center">
                <p id="character_2_name" class="text-slate-200 font-medium text-sm"></p>
                <p id="character_2_skin_text" class="text-slate-400 text-xs"></p>
              </div>
            </div>
          </div>
          
          <div class="space-y-3">
            <div>
              <label class="block text-xs font-medium text-slate-200 mb-1">Personaje</label>
              <select id="character_2" name="character_2" class="w-full bg-slate-600 border border-slate-500 text-slate-200 rounded-md px-2 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" onchange="updateCharacterPreview(2)">
                <option value="">Seleccionar...</option>
                <% smash_character_options.each do |name, key| %>
                  <option value="<%= key %>"><%= name %></option>
                <% end %>
              </select>
            </div>
            <div>
              <label class="block text-xs font-medium text-slate-200 mb-1">Skin</label>
              <select id="skin_2" name="skin_2" class="w-full bg-slate-600 border border-slate-500 text-slate-200 rounded-md px-2 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 mb-2" onchange="updateCharacterPreview(2)">
                <% smash_skin_options.each do |name, value| %>
                  <option value="<%= value %>"><%= name %></option>
                <% end %>
              </select>
              
              <!-- Mini galería de skins -->
              <div id="skins_gallery_2" class="hidden">
                <p class="text-xs text-slate-400 mb-1">Skins:</p>
                <div class="grid grid-cols-4 gap-1">
                  <% (1..8).each do |skin_num| %>
                    <button type="button" 
                            class="skin-selector border-2 border-transparent hover:border-blue-400 rounded p-1 transition-colors" 
                            data-character-slot="2" 
                            data-skin="<%= skin_num %>"
                            onclick="selectSkin(2, <%= skin_num %>)">
                      <div class="w-6 h-6 bg-slate-600 rounded border skin-icon-<%= skin_num %>"></div>
                    </button>
                  <% end %>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Personaje 3 -->
        <div class="p-4 bg-slate-700 rounded-lg">
          <h4 class="text-base font-medium text-slate-200 mb-4 flex items-center justify-center">
            <span class="bg-green-600 text-white w-7 h-7 rounded-full flex items-center justify-center text-sm font-bold mr-2">3</span>
            Terciario
          </h4>
          
          <!-- Vista previa del personaje seleccionado -->
          <div id="character_3_preview" class="mb-4 p-3 bg-slate-600 rounded-lg hidden">
            <div class="flex flex-col items-center space-y-2">
              <div id="character_3_icon" class="flex-shrink-0"></div>
              <div class="text-center">
                <p id="character_3_name" class="text-slate-200 font-medium text-sm"></p>
                <p id="character_3_skin_text" class="text-slate-400 text-xs"></p>
              </div>
            </div>
          </div>
          
          <div class="space-y-3">
            <div>
              <label class="block text-xs font-medium text-slate-200 mb-1">Personaje</label>
              <select id="character_3" name="character_3" class="w-full bg-slate-600 border border-slate-500 text-slate-200 rounded-md px-2 py-2 text-sm focus:ring-2 focus:ring-green-500 focus:border-green-500" onchange="updateCharacterPreview(3)">
                <option value="">Seleccionar...</option>
                <% smash_character_options.each do |name, key| %>
                  <option value="<%= key %>"><%= name %></option>
                <% end %>
              </select>
            </div>
            <div>
              <label class="block text-xs font-medium text-slate-200 mb-1">Skin</label>
              <select id="skin_3" name="skin_3" class="w-full bg-slate-600 border border-slate-500 text-slate-200 rounded-md px-2 py-2 text-sm focus:ring-2 focus:ring-green-500 focus:border-green-500 mb-2" onchange="updateCharacterPreview(3)">
                <% smash_skin_options.each do |name, value| %>
                  <option value="<%= value %>"><%= name %></option>
                <% end %>
              </select>
              
              <!-- Mini galería de skins -->
              <div id="skins_gallery_3" class="hidden">
                <p class="text-xs text-slate-400 mb-1">Skins:</p>
                <div class="grid grid-cols-4 gap-1">
                  <% (1..8).each do |skin_num| %>
                    <button type="button" 
                            class="skin-selector border-2 border-transparent hover:border-green-400 rounded p-1 transition-colors" 
                            data-character-slot="3" 
                            data-skin="<%= skin_num %>"
                            onclick="selectSkin(3, <%= skin_num %>)">
                      <div class="w-6 h-6 bg-slate-600 rounded border skin-icon-<%= skin_num %>"></div>
                    </button>
                  <% end %>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="flex justify-end space-x-3 pt-4 border-t border-slate-600 mt-6">
        <button type="button" onclick="closeSmashCharacterModal()" class="px-6 py-2 border border-slate-500 text-slate-300 rounded-md hover:bg-slate-700 transition-colors">
          Cancelar
        </button>
        <button type="submit" class="px-6 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors">
          Guardar Personajes
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Modal para editar información del jugador -->
<div id="editInfoModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-[9999] flex items-center justify-center" style="z-index: 9999;">
  <div id="edit_info_modal_content">
    <!-- El contenido se cargará dinámicamente aquí -->
  </div>
</div>

<!-- Modal para editar equipos del jugador -->
<div id="editTeamsModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-[9999] flex items-center justify-center" style="z-index: 9999;">
  <div id="edit_teams_modal_content">
    <!-- El contenido se cargará dinámicamente aquí -->
  </div>
</div>

<script>
// Funciones globales para el modal de personajes de Smash
function openSmashCharacterModal(playerId) {
  console.log("=== Abriendo modal para jugador:", playerId, "===");
  
  // Verificar que el modal existe
  const modal = document.getElementById('smashCharacterModal');
  if (!modal) {
    console.error("❌ Modal no encontrado en el DOM");
    return;
  }
  
  console.log("✅ Modal encontrado:", modal);
  
  // Limpiar formulario antes de mostrar el modal
  resetModalForm();
  
  // Mostrar el modal
  document.getElementById('playerId').value = playerId;
  modal.classList.remove('hidden');
  
  console.log("✅ Modal debería estar visible ahora. Classes:", modal.className);
  
  // Cargar datos actuales del jugador via AJAX
  fetch(`/players/${playerId}/current_characters`, {
    method: 'GET',
    headers: {
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
      'Accept': 'application/json'
    }
  })
  .then(response => {
    console.log("📡 Respuesta del servidor:", response.status);
    return response.json();
  })
  .then(data => {
    console.log("📦 Datos recibidos:", data);
    if (data.success) {
      // Rellenar formulario con datos actuales
      document.getElementById('character_1').value = data.character_1 || '';
      document.getElementById('skin_1').value = data.skin_1 || '1';
      document.getElementById('character_2').value = data.character_2 || '';
      document.getElementById('skin_2').value = data.skin_2 || '1';
      document.getElementById('character_3').value = data.character_3 || '';
      document.getElementById('skin_3').value = data.skin_3 || '1';
      console.log("✅ Formulario rellenado con datos del servidor");
      
      // Actualizar vistas previas
      setTimeout(() => {
        [1, 2, 3].forEach(slot => {
          const character = data[`character_${slot}`];
          if (character && window.updateCharacterPreview) {
            window.updateCharacterPreview(slot);
          }
        });
        console.log("✅ Vistas previas actualizadas");
      }, 50);
    } else {
      console.warn("⚠️ Error cargando datos, usando valores por defecto:", data.error);
    }
  })
  .catch(error => {
    console.error('❌ Error cargando datos del jugador:', error);
  });
}

function closeSmashCharacterModal() {
  const modal = document.getElementById('smashCharacterModal');
  modal.classList.add('hidden');
  
  // Limpiar completamente el formulario y las vistas previas
  resetModalForm();
  console.log("✅ Modal cerrado y formulario limpiado");
}

// Nueva función para resetear completamente el modal
function resetModalForm() {
  console.log("🧹 Limpiando formulario del modal...");
  
  // Limpiar todos los selects
  ['character_1', 'character_2', 'character_3'].forEach(id => {
    const select = document.getElementById(id);
    if (select) select.value = '';
  });
  
  ['skin_1', 'skin_2', 'skin_3'].forEach(id => {
    const select = document.getElementById(id);
    if (select) select.value = '1';
  });
  
  // Ocultar todas las vistas previas
  [1, 2, 3].forEach(slot => {
    const preview = document.getElementById(`character_${slot}_preview`);
    const gallery = document.getElementById(`skins_gallery_${slot}`);
    
    if (preview) preview.classList.add('hidden');
    if (gallery) gallery.classList.add('hidden');
    
    // Limpiar contenido de las vistas previas
    const iconDiv = document.getElementById(`character_${slot}_icon`);
    const nameP = document.getElementById(`character_${slot}_name`);
    const skinTextP = document.getElementById(`character_${slot}_skin_text`);
    
    if (iconDiv) iconDiv.innerHTML = '';
    if (nameP) nameP.textContent = '';
    if (skinTextP) skinTextP.textContent = '';
  });
  
  console.log("✅ Formulario y vistas previas limpiados");
}

// Evento del formulario (usando delegación para funcionar con turbo)
document.addEventListener('submit', function(e) {
  if (e.target.id === 'smashCharacterForm') {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const playerId = formData.get('player_id');
    
    // Enviar datos via AJAX con Turbo Stream para actualización automática
    fetch(`/players/${playerId}/update_smash_characters`, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
        'Accept': 'text/vnd.turbo-stream.html',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        character_1: formData.get('character_1'),
        skin_1: formData.get('skin_1'),
        character_2: formData.get('character_2'),
        skin_2: formData.get('skin_2'),
        character_3: formData.get('character_3'),
        skin_3: formData.get('skin_3')
      })
    })
    .then(response => {
      if (response.headers.get('Content-Type')?.includes('turbo-stream')) {
        // Es una respuesta turbo-stream, procesarla
        return response.text().then(html => {
          closeSmashCharacterModal();
          console.log("✅ Personajes actualizados con Turbo Stream");
          
          // Turbo procesará automáticamente la respuesta
          Turbo.renderStreamMessage(html);
          return { success: true };
        });
      } else {
        // Es una respuesta JSON (fallback)
        return response.json();
      }
    })
    .then(data => {
      if (data.success) {
        // Ya manejado arriba para turbo-stream
        if (!data.turbo_stream_processed) {
          closeSmashCharacterModal();
          console.log("✅ Personajes actualizados con JSON fallback");
          
          // Fallback: recargar turbo frame manualmente
          const turboFrame = document.getElementById('players_results');
          if (turboFrame) {
            const currentSrc = turboFrame.getAttribute('src') || window.location.pathname;
            const url = new URL(currentSrc, window.location.origin);
            url.searchParams.set('_reload', Date.now());
            
            const searchParams = new URLSearchParams(window.location.search);
            if (searchParams.get('query')) {
              url.searchParams.set('query', searchParams.get('query'));
            }
            
            turboFrame.setAttribute('src', url.toString());
            console.log("🔄 Recargando turbo frame con URL:", url.toString());
          } else {
            console.log("⚠️ Turbo frame no encontrado, recargando página completa");
            window.location.reload();
          }
        }
      } else {
        alert('Error al guardar los personajes: ' + (data.error || 'Error desconocido'));
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Error al guardar los personajes');
    });
  }
});

// Cerrar modal al hacer clic fuera de él
document.addEventListener('click', function(e) {
  const modal = document.getElementById('smashCharacterModal');
  if (e.target === modal) {
    closeSmashCharacterModal();
  }
  
  // Cerrar modal de información al hacer clic fuera de él
  const infoModal = document.getElementById('editInfoModal');
  const infoModalContent = document.getElementById('edit_info_modal_content');
  
  if (e.target === infoModal && infoModalContent && !infoModalContent.contains(e.target)) {
    closeEditInfoModal();
  }
  
  // Cerrar modal de equipos al hacer clic fuera de él
  const teamsModal = document.getElementById('editTeamsModal');
  const teamsModalContent = document.getElementById('edit_teams_modal_content');
  
  if (e.target === teamsModal && teamsModalContent && !teamsModalContent.contains(e.target)) {
    closeEditTeamsModal();
  }
});

// Cerrar modal con tecla Escape
document.addEventListener('keydown', function(e) {
  if (e.key === 'Escape') {
    const modal = document.getElementById('smashCharacterModal');
    if (modal && !modal.classList.contains('hidden')) {
      closeSmashCharacterModal();
    }
    
    const infoModal = document.getElementById('editInfoModal');
    if (infoModal && !infoModal.classList.contains('hidden')) {
      closeEditInfoModal();
    }
    
    const teamsModal = document.getElementById('editTeamsModal');
    if (teamsModal && !teamsModal.classList.contains('hidden')) {
      closeEditTeamsModal();
    }
  }
});

// Función para mostrar/ocultar ayuda de filtros
function toggleFiltersHelp() {
  const helpDiv = document.getElementById('filtersHelp');
  if (helpDiv) {
    helpDiv.classList.toggle('hidden');
    
    // Agregar animación suave
    if (!helpDiv.classList.contains('hidden')) {
      helpDiv.style.opacity = '0';
      helpDiv.style.transform = 'translateY(-10px)';
      setTimeout(() => {
        helpDiv.style.transition = 'all 0.3s ease-out';
        helpDiv.style.opacity = '1';
        helpDiv.style.transform = 'translateY(0)';
      }, 10);
    }
  }
}

// Función para actualizar indicadores visuales de filtros activos
function updateFilterIndicators() {
  const characterFilter = document.querySelector('select[name="character_filter"]');
  const sortBy = document.querySelector('select[name="sort_by"]');
  const queryInput = document.querySelector('input[name="query"]');
  
  // Indicador para filtro de personaje
  if (characterFilter) {
    if (characterFilter.value && characterFilter.value !== '') {
      characterFilter.classList.add('filter-active');
      characterFilter.parentElement.classList.add('ring-2', 'ring-blue-500', 'ring-opacity-50');
    } else {
      characterFilter.classList.remove('filter-active');
      characterFilter.parentElement.classList.remove('ring-2', 'ring-blue-500', 'ring-opacity-50');
    }
  }
  
  // Indicador para ordenamiento (solo si no es el default)
  if (sortBy) {
    if (sortBy.value && sortBy.value !== 'recent_tournament') {
      sortBy.classList.add('filter-active');
      sortBy.parentElement.classList.add('ring-2', 'ring-green-500', 'ring-opacity-50');
    } else {
      sortBy.classList.remove('filter-active');
      sortBy.parentElement.classList.remove('ring-2', 'ring-green-500', 'ring-opacity-50');
    }
  }
  
  // Indicador para búsqueda
  if (queryInput) {
    if (queryInput.value && queryInput.value.trim() !== '') {
      queryInput.classList.add('filter-active');
      queryInput.parentElement.classList.add('ring-2', 'ring-red-500', 'ring-opacity-50');
    } else {
      queryInput.classList.remove('filter-active');
      queryInput.parentElement.classList.remove('ring-2', 'ring-red-500', 'ring-opacity-50');
    }
  }
}

// Función para mostrar estadísticas de filtros
function updateFilterStats() {
  const playersResults = document.getElementById('players_results');
  if (!playersResults) return;
  
  // Contar jugadores visibles
  const visiblePlayers = playersResults.querySelectorAll('.player-row, .player-card').length;
  
  // Crear o actualizar indicador de estadísticas
  let statsIndicator = document.getElementById('filter-stats-indicator');
  if (!statsIndicator) {
    statsIndicator = document.createElement('div');
    statsIndicator.id = 'filter-stats-indicator';
    statsIndicator.className = 'text-xs text-slate-400 mt-2 flex items-center justify-center md:justify-end';
    
    const filtersContainer = document.querySelector('.mb-6.bg-slate-800');
    if (filtersContainer) {
      filtersContainer.appendChild(statsIndicator);
    }
  }
  
  // Verificar si hay filtros activos
  const hasActiveFilters = document.querySelector('.filter-active') !== null;
  
  if (hasActiveFilters) {
    statsIndicator.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1 text-blue-400" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414V15a1 1 0 01-.293.707l-2 2A1 1 0 018 17v-5.586L3.293 6.707A1 1 0 013 6V3z" clip-rule="evenodd" />
      </svg>
      <span class="text-blue-400">Filtros activos</span>
      <span class="mx-2">•</span>
      <span>${visiblePlayers} resultado${visiblePlayers !== 1 ? 's' : ''}</span>
    `;
    statsIndicator.classList.remove('hidden');
  } else {
    statsIndicator.classList.add('hidden');
  }
}

// Función para limpiar todos los filtros con animación
function clearAllFilters() {
  const form = document.querySelector('form[data-controller="search"]');
  if (!form) return;
  
  // Limpiar campos
  const queryInput = form.querySelector('input[name="query"]');
  const characterFilter = form.querySelector('select[name="character_filter"]');
  const sortBy = form.querySelector('select[name="sort_by"]');
  
  if (queryInput) queryInput.value = '';
  if (characterFilter) characterFilter.value = '';
  if (sortBy) sortBy.value = 'recent_tournament';
  
  // Actualizar indicadores
  updateFilterIndicators();
  
  // Enviar formulario
  const searchController = form.searchController || window.searchController;
  if (searchController && searchController.search) {
    searchController.search();
  } else {
    // Fallback: enviar formulario manualmente
    form.submit();
  }
}

// Inicializar indicadores cuando se carga la página
document.addEventListener('DOMContentLoaded', function() {
  updateFilterIndicators();
  updateFilterStats();
  
  // Escuchar cambios en los filtros
  const form = document.querySelector('form[data-controller="search"]');
  if (form) {
    form.addEventListener('input', function() {
      setTimeout(() => {
        updateFilterIndicators();
        updateFilterStats();
      }, 100);
    });
    
    form.addEventListener('change', function() {
      setTimeout(() => {
        updateFilterIndicators();
        updateFilterStats();
      }, 100);
    });
  }
});

// Actualizar indicadores cuando se recarga vía Turbo
document.addEventListener('turbo:frame-render', function() {
  setTimeout(() => {
    updateFilterIndicators();
    updateFilterStats();
  }, 100);
});

// Función para asegurar que las funciones globales estén disponibles
function ensureGlobalFunctions() {
  // Si window.SmashSeeding no está disponible, esperar un poco y reintentar
  if (typeof window.SmashSeeding === 'undefined') {
    console.log("⏳ Esperando a que se carguen las funciones globales...");
    setTimeout(ensureGlobalFunctions, 100);
    return;
  }
  
  // Ahora podemos usar las funciones globales de forma segura
  window.characterNames = window.SmashSeeding.characterNames;
  window.updateCharacterPreview = window.SmashSeeding.updateCharacterPreview;
  window.updateSkinsGallery = window.SmashSeeding.updateSkinsGallery;
  window.selectSkin = window.SmashSeeding.selectSkin;
  
  console.log("✅ Funciones globales cargadas correctamente");
}

// Inicializar cuando el DOM esté listo
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', ensureGlobalFunctions);
} else {
  ensureGlobalFunctions();
}

// Inicializar vistas previas cuando se carga el modal
function initializeCharacterPreviews() {
  // Actualizar todas las vistas previas existentes
  [1, 2, 3].forEach(slot => {
    const characterSelect = document.getElementById(`character_${slot}`);
    if (characterSelect && characterSelect.value && window.updateCharacterPreview) {
      window.updateCharacterPreview(slot);
    }
  });
}

// Funciones para el modal de edición de información del jugador
function openEditInfoModal(playerId) {
  console.log("=== Abriendo modal de edición de información para jugador:", playerId, "===");
  
  const modal = document.getElementById('editInfoModal');
  if (!modal) {
    console.error("❌ Modal de edición de información no encontrado");
    return;
  }
  
  // Mostrar el modal
  modal.classList.remove('hidden');
  
  // Cargar el formulario via AJAX
  fetch(`/players/${playerId}/edit_info`, {
    method: 'GET',
    headers: {
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
      'Accept': 'text/html'
    }
  })
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.text();
  })
  .then(html => {
    const modalContent = document.getElementById('edit_info_modal_content');
    if (modalContent) {
      modalContent.innerHTML = html;
      console.log("✅ Formulario de edición cargado");
    } else {
      console.error("❌ Contenedor del modal no encontrado");
      throw new Error("Modal content container not found");
    }
  })
  .catch(error => {
    console.error('❌ Error cargando formulario de edición:', error);
    const modalContent = document.getElementById('edit_info_modal_content');
    if (modalContent) {
      modalContent.innerHTML = `
        <div class="bg-slate-800 rounded-lg shadow-xl border border-slate-600 p-6 w-full max-w-md mx-4">
          <div class="text-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-red-400 mb-4" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
            </svg>
            <h3 class="text-lg font-medium text-slate-100 mb-2">Error</h3>
            <p class="text-slate-400 mb-4">No se pudo cargar el formulario de edición</p>
            <button onclick="closeEditInfoModal()" class="px-4 py-2 bg-slate-600 text-slate-200 rounded-md hover:bg-slate-500">
              Cerrar
            </button>
          </div>
        </div>
      `;
    } else {
      console.error("❌ No se puede mostrar el error: contenedor del modal no encontrado");
      // Cerrar el modal si no podemos mostrar el contenido
      closeEditInfoModal();
    }
  });
}

function closeEditInfoModal() {
  const modal = document.getElementById('editInfoModal');
  if (modal) {
    modal.classList.add('hidden');
    
    // Limpiar contenido
    const modalContent = document.getElementById('edit_info_modal_content');
    if (modalContent) {
      modalContent.innerHTML = '';
    }
    
    console.log("✅ Modal de edición de información cerrado");
  }
}

// Manejar envío del formulario de edición de información
document.addEventListener('submit', function(e) {
  // Verificar si es el formulario de edición de información
  if (e.target.closest('#editInfoModal')) {
    e.preventDefault();
    
    const form = e.target;
    const formData = new FormData(form);
    const playerId = form.action.match(/\/players\/(\d+)\//)[1];
    
    // Enviar datos via AJAX con Turbo Stream
    fetch(form.action, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
        'Accept': 'text/vnd.turbo-stream.html'
      },
      body: formData
    })
    .then(response => {
      if (response.headers.get('Content-Type')?.includes('turbo-stream')) {
        return response.text().then(html => {
          closeEditInfoModal();
          console.log("✅ Información del jugador actualizada con Turbo Stream");
          
          // Turbo procesará automáticamente la respuesta
          Turbo.renderStreamMessage(html);
          return { success: true };
        });
      } else {
        return response.json();
      }
    })
    .then(data => {
      if (data.success) {
        // Ya manejado arriba para turbo-stream
        if (!data.turbo_stream_processed) {
          closeEditInfoModal();
          console.log("✅ Información del jugador actualizada con JSON fallback");
          
          // Fallback: recargar turbo frame manualmente
          const turboFrame = document.getElementById('players_results');
          if (turboFrame) {
            const currentSrc = turboFrame.getAttribute('src') || window.location.pathname;
            const url = new URL(currentSrc, window.location.origin);
            url.searchParams.set('_reload', Date.now());
            
            const searchParams = new URLSearchParams(window.location.search);
            if (searchParams.get('query')) {
              url.searchParams.set('query', searchParams.get('query'));
            }
            
            turboFrame.setAttribute('src', url.toString());
            console.log("🔄 Recargando turbo frame con URL:", url.toString());
          } else {
            console.log("⚠️ Turbo frame no encontrado, recargando página completa");
            window.location.reload();
          }
        }
      } else if (data.errors) {
        console.error("❌ Errores de validación:", data.errors);
        // Los errores se mostrarán en el formulario via turbo-stream
      }
    })
    .catch(error => {
      console.error('❌ Error actualizando información del jugador:', error);
      alert('Error al actualizar la información del jugador');
    });
  }
  
  // Verificar si es el formulario de edición de equipos
  if (e.target.id === 'editTeamsForm') {
    e.preventDefault();
    
    const form = e.target;
    const formData = new FormData(form);
    
    // Enviar datos via AJAX con Turbo Stream
    fetch(form.action, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
        'Accept': 'text/vnd.turbo-stream.html'
      },
      body: formData
    })
    .then(response => {
      if (response.headers.get('Content-Type')?.includes('turbo-stream')) {
        return response.text().then(html => {
          closeEditTeamsModal();
          console.log("✅ Equipos del jugador actualizados con Turbo Stream");
          
          // Turbo procesará automáticamente la respuesta
          Turbo.renderStreamMessage(html);
          return { success: true };
        });
      } else {
        return response.json();
      }
    })
    .then(data => {
      if (data.success) {
        // Ya manejado arriba para turbo-stream
        if (!data.turbo_stream_processed) {
          closeEditTeamsModal();
          console.log("✅ Equipos del jugador actualizados con JSON fallback");
          
          // Fallback: recargar turbo frame manualmente
          const turboFrame = document.getElementById('players_results');
          if (turboFrame) {
            const currentSrc = turboFrame.getAttribute('src') || window.location.pathname;
            const url = new URL(currentSrc, window.location.origin);
            url.searchParams.set('_reload', Date.now());
            
            const searchParams = new URLSearchParams(window.location.search);
            if (searchParams.get('query')) {
              url.searchParams.set('query', searchParams.get('query'));
            }
            
            turboFrame.setAttribute('src', url.toString());
            console.log("🔄 Recargando turbo frame con URL:", url.toString());
          } else {
            console.log("⚠️ Turbo frame no encontrado, recargando página completa");
            window.location.reload();
          }
        }
      } else if (data.errors) {
        console.error("❌ Errores de validación en equipos:", data.errors);
        alert('Error al actualizar los equipos: ' + (data.errors.join ? data.errors.join(', ') : data.errors));
      }
    })
    .catch(error => {
      console.error('❌ Error actualizando equipos del jugador:', error);
      alert('Error al actualizar los equipos del jugador');
    });
  }
});

// Funciones globales para el modal de edición de equipos del jugador
window.handleTeamSelection = function() {
  const checkboxes = document.querySelectorAll('.team-checkbox');
  const primaryRadios = document.querySelectorAll('.primary-team-radio');
  const summary = document.getElementById('team-selection-summary');
  const summaryList = document.getElementById('selected-teams-list');
  
  let selectedCount = 0;
  let hasSelection = false;
  
  // Actualizar estado de radio buttons basado en checkboxes
  checkboxes.forEach(checkbox => {
    const teamId = checkbox.value;
    const radio = document.querySelector(`input[name="primary_team_id"][value="${teamId}"]`);
    
    if (checkbox.checked) {
      selectedCount++;
      hasSelection = true;
      if (radio) {
        radio.disabled = false;
      }
    } else {
      if (radio) {
        radio.disabled = true;
        radio.checked = false;
      }
    }
  });
  
  // Si solo hay un equipo seleccionado, marcarlo como principal automáticamente
  if (selectedCount === 1) {
    const checkedCheckbox = document.querySelector('.team-checkbox:checked');
    if (checkedCheckbox) {
      const radio = document.querySelector(`input[name="primary_team_id"][value="${checkedCheckbox.value}"]`);
      if (radio && !radio.disabled) {
        radio.checked = true;
      }
    }
  }
  
  // Actualizar resumen
  if (summary && summaryList) {
    if (hasSelection) {
      summary.classList.remove('hidden');
      summaryList.innerHTML = '';
      
      checkboxes.forEach(checkbox => {
        if (checkbox.checked) {
          const teamCard = checkbox.closest('.team-option');
          const teamName = teamCard.querySelector('h5').textContent;
          const teamAcronym = teamCard.querySelector('span').textContent;
          const isPrimary = document.querySelector(`input[name="primary_team_id"][value="${checkbox.value}"]:checked`);
          
          const li = document.createElement('li');
          li.className = 'flex items-center justify-between py-1';
          li.innerHTML = `
            <span class="text-slate-200">${teamAcronym} - ${teamName}</span>
            ${isPrimary ? '<span class="text-xs bg-blue-600 text-white px-2 py-1 rounded">Principal</span>' : '<span class="text-xs text-slate-400">Secundario</span>'}
          `;
          summaryList.appendChild(li);
        }
      });
    } else {
      summary.classList.add('hidden');
    }
  }
};

window.updatePrimaryIndicators = function() {
  // Actualizar indicadores visuales cuando cambia el equipo principal
  setTimeout(() => {
    if (typeof window.handleTeamSelection === 'function') {
      window.handleTeamSelection();
    }
  }, 10);
};

// Funciones para el modal de edición de equipos del jugador
function openEditTeamsModal(playerId) {
  console.log("=== Abriendo modal de edición de equipos para jugador:", playerId, "===");
  
  const modal = document.getElementById('editTeamsModal');
  if (!modal) {
    console.error("❌ Modal de edición de equipos no encontrado");
    return;
  }
  
  // Mostrar el modal
  modal.classList.remove('hidden');
  
  // Cargar el formulario via AJAX
  fetch(`/players/${playerId}/edit_teams`, {
    method: 'GET',
    headers: {
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
      'Accept': 'text/html'
    }
  })
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.text();
  })
  .then(html => {
    const modalContent = document.getElementById('edit_teams_modal_content');
    if (modalContent) {
      modalContent.innerHTML = html;
      console.log("✅ Formulario de edición de equipos cargado");
      
      // Inicializar el estado del formulario
      setTimeout(() => {
        if (typeof window.handleTeamSelection === 'function') {
          window.handleTeamSelection();
        }
      }, 100);
    } else {
      console.error("❌ Contenedor del modal de equipos no encontrado");
      throw new Error("Teams modal content container not found");
    }
  })
  .catch(error => {
    console.error('❌ Error cargando formulario de edición de equipos:', error);
    const modalContent = document.getElementById('edit_teams_modal_content');
    if (modalContent) {
      modalContent.innerHTML = `
        <div class="bg-slate-800 rounded-lg shadow-xl border border-slate-600 p-6 w-full max-w-md mx-4">
          <div class="text-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-red-400 mb-4" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
            </svg>
            <h3 class="text-lg font-medium text-slate-100 mb-2">Error</h3>
            <p class="text-slate-400 mb-4">No se pudo cargar el formulario de equipos</p>
            <button onclick="closeEditTeamsModal()" class="px-4 py-2 bg-slate-600 text-slate-200 rounded-md hover:bg-slate-500">
              Cerrar
            </button>
          </div>
        </div>
      `;
    } else {
      console.error("❌ No se puede mostrar el error: contenedor del modal de equipos no encontrado");
      closeEditTeamsModal();
    }
  });
}

function closeEditTeamsModal() {
  const modal = document.getElementById('editTeamsModal');
  if (modal) {
    modal.classList.add('hidden');
    
    // Limpiar contenido
    const modalContent = document.getElementById('edit_teams_modal_content');
    if (modalContent) {
      modalContent.innerHTML = '';
    }
    
    console.log("✅ Modal de edición de equipos cerrado");
  }
}
</script>

<style>
/* Estilos personalizados para los selects del modal */
#smashCharacterModal select {
  background-color: #475569 !important; /* slate-600 */
  color: #f1f5f9 !important; /* slate-100 */
  border-color: #64748b !important; /* slate-500 */
}

#smashCharacterModal select:focus {
  background-color: #475569 !important;
  border-color: #ef4444 !important; /* red-500 */
  box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.2) !important;
}

#smashCharacterModal select option {
  background-color: #475569 !important; /* slate-600 */
  color: #f1f5f9 !important; /* slate-100 */
  padding: 8px !important;
}

#smashCharacterModal select option:hover,
#smashCharacterModal select option:checked {
  background-color: #334155 !important; /* slate-700 */
  color: #f1f5f9 !important;
}

/* Mejorar contraste de labels */
#smashCharacterModal label {
  color: #f1f5f9 !important; /* slate-100 */
  font-weight: 500 !important;
}

/* Estilo para iconos de personajes más suave */
.smash-character-icon {
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.smash-character-icon:hover {
  transform: scale(1.05);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
}
</style> 