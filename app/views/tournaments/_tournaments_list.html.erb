<% if tournaments.any? %>
<div class="overflow-hidden shadow-lg rounded-lg border border-slate-600 bg-slate-800">
  <table class="min-w-full bg-slate-800 divide-y divide-slate-600">
    <thead>
      <tr class="bg-gradient-to-r from-slate-900 to-blue-900 border-b-2 border-red-500">
        <th class="py-3 px-6 text-left text-xs font-semibold text-blue-300 uppercase tracking-wider">Nombre</th>
        <th class="py-3 px-6 text-left text-xs font-semibold text-blue-300 uppercase tracking-wider">Fecha Inicio</th>
        <th class="py-3 px-6 text-left text-xs font-semibold text-blue-300 uppercase tracking-wider">Lugar</th>
        <th class="py-3 px-6 text-left text-xs font-semibold text-blue-300 uppercase tracking-wider">Estado</th>
        <th class="py-3 px-6 text-left text-xs font-semibold text-blue-300 uppercase tracking-wider">Acciones</th>
      </tr>
    </thead>
    <tbody class="divide-y divide-slate-600">
      <% tournaments.each_with_index do |tournament, index| %>
          <% 
            # Calcular estadísticas de sincronización
            total_events = tournament.events.count
            synced_events = tournament.events.count { |e| e.respond_to?(:seeds_last_synced_at) && e.seeds_last_synced_at.present? }
            sync_percentage = total_events > 0 ? (synced_events.to_f / total_events * 100).to_i : 0
            sync_emoji = case sync_percentage
                        when 0 then "❌"
                        when 1..50 then "⚠️"
                        when 51..99 then "🔄"
                        else "✅"
                        end
            # Color alternado para torneos
            tournament_bg_color = index % 2 == 0 ? 'bg-slate-800' : 'bg-slate-900'
            tournament_hover_color = index % 2 == 0 ? 'hover:bg-slate-700' : 'hover:bg-slate-800'
          %>
        <tr class="<%= tournament_bg_color %> <%= tournament_hover_color %> transition-colors duration-150 ease-in-out tournament-row border-b border-slate-700" data-tournament-id="<%= tournament.id %>">
          <td class="py-4 px-8">
            <span class="font-medium text-slate-100 text-base pl-8"><%= tournament.name %></span>
          </td>
          <td class="py-4 px-6 whitespace-nowrap date-cell">
            <div class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-3 text-blue-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd" />
              </svg>
              <span class="text-slate-300 text-xs sm:text-sm tracking-wide"><%= format_datetime_cl(tournament.start_at) %></span>
            </div>
          </td>
          <td class="py-4 px-6">
            <div class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-3 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd" />
              </svg>
              <span class="text-slate-300 text-xs sm:text-sm tracking-wide"><%= tournament.venue_address.presence || "Sin ubicación" %></span>
            </div>
          </td>
          <td class="py-4 px-6">
            <div class="flex items-center">
              <span class="mr-3 text-base" style="filter: drop-shadow(0 0 2px #f87171);"><%= sync_emoji %></span>
              <% if total_events > 0 %>
                <div class="flex flex-col">
                  <span class="text-xs sm:text-sm text-slate-300 tracking-wide"><%= synced_events %>/<%= total_events %> eventos sincronizados</span>
                  <div class="w-36 bg-slate-700 rounded-full h-2.5 mt-1 overflow-hidden border border-slate-600">
                    <div class="h-2.5 rounded-full <%= sync_percentage == 100 ? 'bg-red-500' : sync_percentage > 50 ? 'bg-blue-600' : 'bg-amber-500' %>" style="width: <%= sync_percentage %>%; box-shadow: 0 0 4px <%= sync_percentage == 100 ? '#ef4444' : sync_percentage > 50 ? '#3b82f6' : '#f59e0b' %>;"></div>
                  </div>
                </div>
              <% else %>
                <span class="text-xs sm:text-sm text-slate-400 tracking-wide">Sin eventos</span>
              <% end %>
            </div>
          </td>
          <td class="py-4 px-6">
            <div class="flex space-x-3">
              <!-- Botón para ver eventos (dropdown) -->
              <button 
                id="toggle-events-<%= tournament.id %>" 
                onclick="toggleEventsNew(<%= tournament.id %>)" 
                class="toggle-button inline-flex items-center px-2 py-1 border border-blue-500 text-blue-400 bg-slate-800 rounded-md shadow-sm hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200 cursor-pointer text-xs" 
                data-state="closed">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                  <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                </svg>
                <span>Ver Eventos</span>
                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 ml-1 toggle-icon" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
              </button>
              
              <!-- Botón para sincronizar eventos solo si el torneo no tiene eventos -->
              <% if tournament.events.empty? %>
                <%= link_to sync_events_tournament_path(tournament), class: "inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md shadow-sm text-slate-50 bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-200 cursor-pointer", 
                    data: { 
                      controller: "sync-operation",
                      sync_operation_target: "button",
                      action: "click->sync-operation#startSync",
                      turbo_method: :post,
                      turbo_frame: "tournaments_results"
                    } do %>
                  <div data-sync-operation-target="spinner" class="hidden mr-2">
                    <svg class="animate-spin h-3 w-3 text-slate-50" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                  </div>
                  <div data-sync-operation-target="content">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-2" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
                    </svg>
                    Sincronizar
                  </div>
                <% end %>
              <% end %>
            </div>
          </td>
        </tr>
        <!-- Filas ocultas para los eventos del torneo -->
        <% tournament.events.order(:name).each_with_index do |event, event_index| %>
            <% 
              # Determinar estado de sincronización del evento
              # Usar asociaciones precargadas en lugar de .exists? que ejecuta queries
              event_synced = event.respond_to?(:seeds_last_synced_at) && event.seeds_last_synced_at.present?
              event_has_seeds = event.event_seeds.any?  # Usar .any? en lugar de .exists? para aprovechar precarga
              event_emoji = if event_synced && event_has_seeds
                              "✅"
                            elsif event_has_seeds
                              "🔄"
                            else
                              "❌"
                            end
              # Usar un color diferente para eventos
              event_bg_color = 'bg-slate-700'
              event_hover_color = 'hover:bg-slate-600'
            %>
          <tr id="eventRow-<%= tournament.id %>-<%= event.id %>" class="event-row hidden <%= event_bg_color %> <%= event_hover_color %> transition-colors duration-150 border-b border-slate-600" data-tournament-id="<%= tournament.id %>" style="display: none;">
              <td class="py-3 px-8">
                <div class="flex items-center">
                  <span class="mr-3" style="filter: drop-shadow(0 0 2px #f87171);"><%= event_emoji %></span>
                  <span class="text-slate-200 font-medium text-sm tracking-wide ml-4"><%= event.name %></span>
                </div>
              </td>
              <td class="py-3 px-6 whitespace-nowrap date-cell">
                <% if event_synced %>
                  <div class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd" />
                    </svg>
                    <span class="text-xs text-slate-400">Actualizado: <%= format_datetime_cl(event.seeds_last_synced_at) %></span>
                  </div>
                <% end %>
              </td>
              <td class="py-3 px-6">
                <% if event_has_seeds %>
                  <div class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-3 text-red-400" viewBox="0 0 20 20" fill="currentColor" style="filter: drop-shadow(0 0 2px #f87171);">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.799-2.034c-.784-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                    </svg>
                    <span class="text-xs text-slate-300 font-medium"><%= event.event_seeds.count %> seeds</span>
                  </div>
                <% end %>
              </td>
            <td class="py-3 px-6"></td>
            <td class="py-3 px-6">
              <div class="flex space-x-3">
                <!-- Botón para ver seeds del evento - deshabilitado si no hay seeds -->
                <% if event_has_seeds %>
                  <button 
                    id="seed-button-<%= tournament.id %>-<%= event.id %>"
                    onclick="toggleSeeds('<%= seeds_tournament_event_path(tournament, event) %>', <%= tournament.id %>, <%= event.id %>)"
                    class="inline-flex items-center px-1.5 py-0.5 border border-red-500 text-red-400 bg-slate-800 rounded-md hover:bg-slate-700 focus:outline-none transition-colors duration-200 cursor-pointer seed-toggle-button text-[10px] whitespace-nowrap">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-2 w-2 mr-1" viewBox="0 0 20 20" fill="currentColor" style="filter: drop-shadow(0 0 2px #f87171);">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.799-2.034c-.784-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                    </svg>
                    <span>Ver Seeds</span>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-2 w-2 ml-1 toggle-icon" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                  </button>
                <% else %>
                  <span class="inline-flex items-center px-1.5 py-0.5 text-slate-500 bg-slate-900 rounded-md cursor-not-allowed text-[10px] whitespace-nowrap">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-2 w-2 mr-1" viewBox="0 0 20 20" fill="currentColor">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.799-2.034c-.784-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                    </svg>
                    Ver Seeds
                  </span>
                <% end %>
                
                <!-- Botón para sincronizar seeds - solo visible si no están sincronizados -->
                <% unless event_synced && event_has_seeds %>
                  <%= link_to sync_seeds_tournament_event_path(tournament, event), 
                            class: "inline-flex items-center px-1.5 py-0.5 border border-transparent text-slate-50 bg-red-600 rounded-md hover:bg-red-700 focus:outline-none focus:ring-1 focus:ring-offset-1 focus:ring-red-500 transition-colors duration-200 cursor-pointer text-[10px] whitespace-nowrap",
                            data: { 
                              controller: "sync-operation",
                              sync_operation_target: "button",
                              action: "click->sync-operation#startSync",
                              turbo_method: :post,
                              turbo_frame: "tournaments_results"
                            } do %>
                    <div data-sync-operation-target="spinner" class="hidden mr-1">
                      <svg class="animate-spin h-2 w-2 text-slate-50" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                    </div>
                    <div data-sync-operation-target="content" class="flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-2 w-2 mr-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
                      </svg>
                      <span>Sincronizar Seeds</span>
                    </div>
                  <% end %>
                <% end %>
              </div>
            </td>
          </tr>
          <!-- Fila para mostrar seeds (inicialmente oculta) -->
          <tr id="seedsRow-<%= tournament.id %>-<%= event.id %>" class="seeds-row hidden border-b border-slate-600 bg-slate-800" data-tournament-id="<%= tournament.id %>" data-event-id="<%= event.id %>" style="display: none;">
            <td colspan="5" class="py-2 px-6">
              <div id="event-seeds-<%= event.id %>" class="pl-8 pr-8">
                <% if event_has_seeds %>
                  <!-- El contenido se cargará dinámicamente con Stimulus -->
                  <div class="flex justify-center p-4">
                    <div class="w-full max-w-md py-2 bg-slate-900 rounded-lg flex items-center justify-center text-blue-300 border border-slate-600">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
                      </svg>
                      Haz clic en "Ver Seeds" para cargar la información
                    </div>
                  </div>
                <% else %>
                  <div class="p-4 text-center">
                    <p class="text-slate-400">No hay seeds disponibles para este evento.</p>
                  </div>
                <% end %>
              </div>
            </td>
          </tr>
        <% end %>
        <% if tournament.events.empty? %>
          <tr id="eventRow-<%= tournament.id %>-empty" class="event-row hidden bg-slate-800 border-b border-slate-600" data-tournament-id="<%= tournament.id %>" style="display: none;">
              <td class="py-6 px-6 text-center text-slate-400" colspan="5">
                <div class="flex flex-col items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-slate-500 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span>No hay eventos disponibles</span>
                </div>
              </td>
          </tr>
        <% end %>
      <% end %>
    </tbody>
  </table>
</div>

<!-- Controles de paginación -->
<% if tournaments.respond_to?(:current_page) %>
  <div class="flex items-center justify-between bg-slate-800 rounded-lg shadow-md border border-slate-600 px-6 py-4 mt-6">
    <div class="flex items-center text-sm text-slate-400">
      <span>Mostrando 
        <span class="font-medium text-slate-200"><%= (tournaments.current_page - 1) * tournaments.limit_value + 1 %></span>
        -
        <span class="font-medium text-slate-200"><%= [tournaments.current_page * tournaments.limit_value, tournaments.total_count].min %></span>
        de
        <span class="font-medium text-slate-200"><%= tournaments.total_count %></span>
        torneos
      </span>
    </div>
    
    <div class="flex items-center space-x-2">
      <%= paginate tournaments, 
          theme: 'custom_pagination',
          params: { query: @query }.compact,
          remote: true,
          data: { turbo_frame: 'tournaments_results' } %>
    </div>
  </div>
<% end %>

<style>
  .event-row {
    background-color: #334155; /* slate-700 - Color diferente para eventos */
    display: table-row; /* Asegura que se renderice como fila de tabla */
  }
  
  /* Cursor pointer para elementos clickeables */
  button, a, [role="button"], .cursor-pointer {
    cursor: pointer !important;
  }
  
  /* Ajustes de espaciado y tamaño de texto */
  td, th {
    letter-spacing: 0.02em;
  }
  
  .text-xs {
    font-size: 0.74rem;
    line-height: 1.1rem;
  }
  
  .text-sm {
    font-size: 0.82rem;
    line-height: 1.25rem;
  }
  
  /* Mejor espacio entre elementos */
  .mr-1 {
    margin-right: 0.5rem !important;
  }
  
  .mr-2 {
    margin-right: 0.75rem !important;
  }
  
  .mr-3 {
    margin-right: 1rem !important;
  }

  /* Estilos para los estados de sincronización */
  @keyframes pulse-error {
    0% { background-color: #1e293b; } /* slate-800 */
    50% { background-color: #7f1d1d; } /* red-900 */
    100% { background-color: #1e293b; } /* slate-800 */
  }
  
  .sync-error {
    animation: pulse-error 1s ease-in-out;
  }
  
  .cursor-not-allowed {
    cursor: not-allowed !important;
  }
  
  /* Limitación de tamaño para imágenes e iconos */
  img, svg {
    max-width: 40px;
    max-height: 40px;
  }
  
  /* Específicamente para iconos de marcador de ubicación */
  img[src*="location"], img[src*="marker"], img[src*="pin"] {
    max-width: 32px;
    max-height: 32px;
    filter: drop-shadow(0 0 2px #f87171); /* Efecto neón rojo */
  }
  
  /* Iconos de estrella */
  img[src*="star"], .star-icon {
    max-width: 32px !important;
    max-height: 32px !important;
    filter: drop-shadow(0 0 3px #f87171); /* Efecto neón rojo */
  }
  
  /* Avatares y círculos de usuario */
  .avatar-circle, img[src*="avatar"], img[src*="user"], img[src*="profile"] {
    max-width: 32px;
    max-height: 32px;
    border-radius: 50%;
    border: 1px solid #475569; /* slate-500 */
  }
  
  /* Icono de reloj/tiempo */
  img[src*="clock"], img[src*="time"], .time-icon {
    max-width: 28px;
    max-height: 28px;
  }
  
  /* Efecto de brillo para botones */
  .bg-red-600:hover {
    box-shadow: 0 0 5px 1px #ef4444; /* Brillo rojo */
  }
  
  .bg-blue-600:hover {
    box-shadow: 0 0 5px 1px #3b82f6; /* Brillo azul */
  }
  
  /* Botones más compactos para mejor visualización en línea */
  .toggle-button, .seed-toggle-button {
    white-space: nowrap !important;
    font-size: 0.65rem !important;
    padding: 0.1rem 0.4rem !important;
    line-height: 1 !important;
    display: inline-flex !important;
    align-items: center !important;
  }
  
  .toggle-button svg, .seed-toggle-button svg {
    width: 0.55rem !important;
    height: 0.55rem !important;
    margin-right: 0.2rem !important;
  }
  
  /* Evitar que los botones se partan en múltiples líneas */
  .toggle-button span, .seed-toggle-button span {
    white-space: nowrap !important;
    font-size: 0.65rem !important;
  }
  
  /* Asegurar que los botones se mantengan en una línea */
  td .flex.space-x-3 {
    flex-wrap: nowrap !important;
    gap: 0.25rem !important;
  }
  
  /* Animaciones para colapsables */
  .collapsible-content {
    overflow: hidden;
    max-height: 0;
    opacity: 0;
    transition: max-height 0.5s ease-in-out, opacity 0.4s ease-in-out, transform 0.4s ease;
    transform: translateY(-10px);
    will-change: max-height, opacity, transform;
  }
  
  .collapsible-content.expanded {
    max-height: 1000px; /* Valor alto para asegurar que el contenido quepa */
    opacity: 1;
    transform: translateY(0);
  }
  
  /* Animación de rotación para iconos indicadores */
  .toggle-icon {
    transition: transform 0.3s ease;
  }
  
  .toggle-button[data-state="open"] .toggle-icon {
    transform: rotate(180deg);
  }
  
  /* Animación para botones de expansión */
  .toggle-button {
    transition: background-color 0.2s ease, border-color 0.2s ease, box-shadow 0.2s ease;
  }
  
  .toggle-button[data-state="open"] {
    background-color: #1e40af; /* blue-800 */
    border-color: #60a5fa; /* blue-400 */
    box-shadow: 0 0 8px rgba(59, 130, 246, 0.5);
  }
  
  /* Estilo para el botón de ver seeds activo */
  .seed-toggle-button {
    transition: all 0.3s ease;
  }
  
  .seed-toggle-button.active-button {
    background-color: #991b1b; /* red-800 */
    border-color: #f87171; /* red-400 */
    box-shadow: 0 0 8px rgba(239, 68, 68, 0.5);
  }
  
  .seed-toggle-button.active-button .toggle-icon {
    transform: rotate(180deg);
  }
  
  /* Efecto de entrada y salida para filas */
  @keyframes fadeInDown {
    from {
      opacity: 0;
      transform: translateY(-15px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes fadeOutUp {
    from {
      opacity: 1;
      transform: translateY(0);
    }
    to {
      opacity: 0;
      transform: translateY(-15px);
    }
  }
  
  .fade-in-down {
    animation: fadeInDown 0.3s ease forwards;
  }
  
  .fade-out-up {
    animation: fadeOutUp 0.3s ease forwards;
  }
  
  /* Asegurar que la altura mínima se mantiene durante la animación */
  tr td {
    transition: all 0.3s ease-in-out;
  }
  
  /* Asegurar que los contenedores de fechas no cambien bruscamente */
  .date-cell {
    min-width: 220px;
    display: flex;
    align-items: center;
  }
  
  /* Optimización para evitar bloqueos en la carga inicial */
  body {
    overscroll-behavior: none;
  }
  
  /* Rendimiento de scrolling */
  tbody {
    contain: content;
  }
  
  /* Optimización de renderizado para elementos complejos */
  .tournament-row, .event-row {
    will-change: transform, opacity;
  }
</style>

<script>
  // Función global para alternar la visibilidad de los seeds
  function toggleSeeds(url, tournamentId, eventId) {
    console.log("Toggle seeds para: ", tournamentId, eventId, url);
    
    // Referencias a elementos
    const seedRow = document.getElementById(`seedsRow-${tournamentId}-${eventId}`);
    const button = document.getElementById(`seed-button-${tournamentId}-${eventId}`);
    const toggleIcon = button.querySelector('.toggle-icon');
    
    console.log("Fila de seeds:", seedRow);
    
    // Alternar ícono
    if (toggleIcon) toggleIcon.classList.toggle('rotate-180');
    
    // Si seedRow es null, probablemente necesitamos crear la fila primero
    if (!seedRow) {
      console.log("No se encontró la fila de seeds, buscando la fila del evento para insertar después");
      
      // Buscar la fila del evento
      const eventRow = document.querySelector(`tr.event-row[data-tournament-id="${tournamentId}"][data-event-id="${eventId}"]`);
      if (!eventRow) {
        console.error("No se encontró la fila del evento");
        return;
      }
      
      console.log("Encontrada fila de evento, creando fila de seeds");
      
      // Crear la fila para los seeds
      const newSeedRow = document.createElement('tr');
      newSeedRow.id = `seedsRow-${tournamentId}-${eventId}`;
      newSeedRow.className = 'seeds-row border-b border-slate-600';
      newSeedRow.setAttribute('data-tournament-id', tournamentId);
      newSeedRow.setAttribute('data-event-id', eventId);
      
      // Crear celda para el contenido
      const cell = document.createElement('td');
      cell.setAttribute('colspan', '5'); // Asegúrate que este valor coincida con el número de columnas de la tabla
      cell.className = 'py-2 px-6';
      
      // Crear div para el contenido de seeds
      const container = document.createElement('div');
      container.id = `event-seeds-${eventId}`;
      container.className = 'pl-8 pr-8';
      
      // Agregar el contenedor a la celda
      cell.appendChild(container);
      
      // Agregar la celda a la fila
      newSeedRow.appendChild(cell);
      
      // Insertar después de la fila de evento
      eventRow.parentNode.insertBefore(newSeedRow, eventRow.nextSibling);
      
      // Mostrar indicador de carga
      container.innerHTML = `
        <div class="flex justify-center p-4">
          <div class="flex items-center">
            <svg class="animate-spin h-4 w-4 text-red-500 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <span class="text-slate-300 text-xs">Cargando seeds...</span>
          </div>
        </div>
      `;
      
      // Establecer fila creada como la actual
      const seedRow = newSeedRow;
      
      // Mostrar la fila con animación
      seedRow.classList.remove('hidden');
      seedRow.style.display = 'table-row';
      void seedRow.offsetHeight; // Forzar reflow
      seedRow.classList.add('fade-in-down');
      button.classList.add('active-button');
      
      // Cargar datos vía AJAX
      fetch(url, {
        headers: {
          'Accept': 'text/html',
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`Error HTTP: ${response.status}`);
        }
        return response.text();
      })
      .then(html => {
        console.log("Respuesta recibida:", html.substring(0, 100) + "...");
        
        // Actualizar contenido
        container.innerHTML = html;
        
        // Añadir marcador para saber que está cargado
        const marker = document.createElement('div');
        marker.className = 'seed-content';
        marker.style.display = 'none';
        container.appendChild(marker);
      })
      .catch(error => {
        console.error("Error cargando seeds:", error);
        container.innerHTML = `
          <div class="p-4 bg-red-900/50 text-slate-200 rounded-lg border border-red-600 my-2">
            <div class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-300 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
              </svg>
              <span class="text-sm">Error al cargar los seeds. Por favor intenta de nuevo.</span>
            </div>
          </div>
        `;
      })
      .finally(() => {
        setTimeout(() => {
          seedRow.classList.remove('fade-in-down');
        }, 300);
      });
      
      return;
    }
    
    // La fila ya existe, comprobamos si está visible (toggle)
    if (!seedRow.classList.contains('hidden')) {
      console.log("Ocultando fila de seeds");
      // Ocultar
      seedRow.classList.add('fade-out-up');
      button.classList.remove('active-button');
      
      setTimeout(() => {
        seedRow.classList.add('hidden');
        seedRow.style.display = 'none';
        seedRow.classList.remove('fade-out-up');
      }, 300);
      
      return;
    }
    
    // Mostrar la fila ya existente
    console.log("Mostrando fila de seeds existente");
    seedRow.classList.remove('hidden');
    seedRow.style.display = 'table-row';
    button.classList.add('active-button');
    
    // Obtener contenedor
    const container = seedRow.querySelector(`#event-seeds-${eventId}`);
    
    // Si ya se cargaron los datos anteriormente
    if (container && container.querySelector('.seed-content')) {
      console.log("Datos ya cargados, solo mostrando");
      // Solo hacemos visible
      void seedRow.offsetHeight; // Forzar reflow
      seedRow.classList.add('fade-in-down');
      
      setTimeout(() => {
        seedRow.classList.remove('fade-in-down');
      }, 300);
      
      return;
    }
    
    // Mostrar indicador de carga
    console.log("Cargando datos para fila existente");
    if (container) {
      container.innerHTML = `
        <div class="flex justify-center p-4">
          <div class="flex items-center">
            <svg class="animate-spin h-4 w-4 text-red-500 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <span class="text-slate-300 text-xs">Cargando seeds...</span>
          </div>
        </div>
      `;
    }
    
    // Animación
    void seedRow.offsetHeight; // Forzar reflow
    seedRow.classList.add('fade-in-down');
    
    // Cargar datos vía AJAX
    fetch(url, {
      headers: {
        'Accept': 'text/html',
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    .then(response => {
      if (!response.ok) {
        throw new Error(`Error HTTP: ${response.status}`);
      }
      return response.text();
    })
    .then(html => {
      console.log("Respuesta recibida:", html.substring(0, 100) + "...");
      
      if (container) {
        // Actualizar contenido
        container.innerHTML = html;
        
        // Añadir clase para saber que ya está cargado
        const content = document.createElement('div');
        content.className = 'seed-content';
        content.style.display = 'none';
        container.appendChild(content);
      }
    })
    .catch(error => {
      console.error("Error cargando seeds:", error);
      if (container) {
        container.innerHTML = `
          <div class="p-4 bg-red-900/50 text-slate-200 rounded-lg border border-red-600 my-2">
            <div class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-300 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
              </svg>
              <span class="text-sm">Error al cargar los seeds. Por favor intenta de nuevo.</span>
            </div>
          </div>
        `;
      }
    })
    .finally(() => {
      setTimeout(() => {
        seedRow.classList.remove('fade-in-down');
      }, 300);
    });
  }

  // Nueva implementación con JavaScript puro para toggle de eventos
  function toggleEventsNew(tournamentId) {
    console.log("Toggle eventos para torneo:", tournamentId);
    
    // Referencias
    const button = document.getElementById(`toggle-events-${tournamentId}`);
    const buttonState = button.getAttribute('data-state');
    const isExpanded = buttonState === 'open';
    
    // Toggle icon
    const toggleIcon = button.querySelector('.toggle-icon');
    if (toggleIcon) {
      toggleIcon.classList.toggle('rotate-180');
    }
    
    // Todas las filas de eventos y seeds
    const allEventRows = document.querySelectorAll("tr.event-row");
    const allSeedsRows = document.querySelectorAll("tr.seeds-row");
    
    console.log(`Estado actual: ${buttonState}, filas de eventos: ${allEventRows.length}`);
    
    // Si vamos a cerrar, simplemente ocultamos las filas
    if (isExpanded) {
      console.log("Cerrando filas de eventos para torneo:", tournamentId);
      button.setAttribute('data-state', 'closed');
      button.classList.remove('active-button');
      
      // Ocultar solo las filas del torneo actual
      const currentEventRows = document.querySelectorAll(`tr.event-row[data-tournament-id="${tournamentId}"]`);
      currentEventRows.forEach(row => {
        row.classList.add('fade-out-up');
        
        setTimeout(() => {
          row.classList.add('hidden');
          row.style.display = 'none';
          row.classList.remove('fade-out-up');
        }, 300);
      });
      
      // Ocultar las filas de seeds asociadas
      const currentSeedRows = document.querySelectorAll(`tr.seeds-row[data-tournament-id="${tournamentId}"]`);
      currentSeedRows.forEach(row => {
        row.classList.add('fade-out-up');
        
        setTimeout(() => {
          row.classList.add('hidden');
          row.style.display = 'none';
          row.classList.remove('fade-out-up');
        }, 300);
      });
      
      return;
    }
    
    // Si vamos a abrir, cerramos todos los demás primero
    console.log("Abriendo filas de eventos para torneo:", tournamentId);
    
    // Cerrar otros torneos expandidos
    const otherButtons = document.querySelectorAll(`button[id^="toggle-events-"][data-state="open"]`);
    otherButtons.forEach(otherButton => {
      if (otherButton.id !== `toggle-events-${tournamentId}`) {
        const otherTournamentId = otherButton.id.replace('toggle-events-', '');
        console.log("Cerrando torneo:", otherTournamentId);
        
        // Actualizar estado del botón
        otherButton.setAttribute('data-state', 'closed');
        otherButton.classList.remove('active-button');
        const otherIcon = otherButton.querySelector('.toggle-icon');
        if (otherIcon) otherIcon.classList.remove('rotate-180');
        
        // Ocultar filas
        const otherEventRows = document.querySelectorAll(`tr.event-row[data-tournament-id="${otherTournamentId}"]`);
        otherEventRows.forEach(row => {
          row.classList.add('fade-out-up');
          
          setTimeout(() => {
            row.classList.add('hidden');
            row.style.display = 'none';
            row.classList.remove('fade-out-up');
          }, 300);
        });
        
        // Ocultar filas de seeds
        const otherSeedRows = document.querySelectorAll(`tr.seeds-row[data-tournament-id="${otherTournamentId}"]`);
        otherSeedRows.forEach(row => {
          row.classList.add('fade-out-up');
          
          setTimeout(() => {
            row.classList.add('hidden');
            row.style.display = 'none';
            row.classList.remove('fade-out-up');
          }, 300);
        });
      }
    });
    
    // Actualizar estado del botón actual
    button.setAttribute('data-state', 'open');
    button.classList.add('active-button');
    
    // Mostrar filas de eventos para este torneo
    const currentEventRows = document.querySelectorAll(`tr.event-row[data-tournament-id="${tournamentId}"]`);
    console.log(`Mostrando ${currentEventRows.length} filas para torneo ${tournamentId}`);
    
    currentEventRows.forEach(row => {
      // Asegurar altura mínima en celdas de fecha
      row.querySelectorAll('td.date-cell').forEach(cell => {
        cell.style.minHeight = '40px';
      });
      
      // Mostrar fila
      row.classList.remove('hidden');
      row.style.display = 'table-row';
      
      // Animación de entrada
      void row.offsetHeight; // Forzar reflow
      row.classList.add('fade-in-down');
      
      setTimeout(() => {
        row.classList.remove('fade-in-down');
      }, 300);
    });
  }
  
  // Inicializar para asegurar que todo está cerrado al cargar
  document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM cargado - inicializando estado de filas de eventos");
    
    // Ocultar todas las filas de eventos
    const allEventRows = document.querySelectorAll("tr.event-row");
    allEventRows.forEach(row => {
      row.classList.add('hidden');
      row.style.display = 'none';
    });
    
    // Ocultar todas las filas de seeds
    const allSeedsRows = document.querySelectorAll("tr.seeds-row");
    allSeedsRows.forEach(row => {
      row.classList.add('hidden');
      row.style.display = 'none';
    });
    
    // Resetear estado de todos los botones
    const allButtons = document.querySelectorAll(`button[id^="toggle-events-"]`);
    allButtons.forEach(button => {
      button.setAttribute('data-state', 'closed');
      button.classList.remove('active-button');
      const icon = button.querySelector('.toggle-icon');
      if (icon) icon.classList.remove('rotate-180');
    });
  });
  
  // También inicializar cuando se recarga vía Turbo
  document.addEventListener("turbo:frame-render", function() {
    console.log("Turbo frame renderizado - inicializando estado de filas de eventos");
    
    // Ocultar todas las filas de eventos
    const allEventRows = document.querySelectorAll("tr.event-row");
    allEventRows.forEach(row => {
      row.classList.add('hidden');
      row.style.display = 'none';
    });
    
    // Ocultar todas las filas de seeds
    const allSeedsRows = document.querySelectorAll("tr.seeds-row");
    allSeedsRows.forEach(row => {
      row.classList.add('hidden');
      row.style.display = 'none';
    });
    
    // Resetear estado de todos los botones
    const allButtons = document.querySelectorAll(`button[id^="toggle-events-"]`);
    allButtons.forEach(button => {
      button.setAttribute('data-state', 'closed');
      button.classList.remove('active-button');
      const icon = button.querySelector('.toggle-icon');
      if (icon) icon.classList.remove('rotate-180');
    });
  });
</script>
<% else %>
  <div class="bg-slate-800 p-8 rounded-lg shadow-md text-center border border-slate-600">
    <div class="flex flex-col items-center justify-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-slate-500 mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <h3 class="text-xl text-slate-200 font-medium mb-2">No se encontraron torneos</h3>
      <p class="text-slate-400 mb-4"><%= @query.present? ? "No hay coincidencias con '#{@query}'" : "No hay torneos registrados" %></p>
      <% if @query.present? %>
        <%= link_to "Ver todos los torneos", tournaments_path, class: "inline-flex items-center px-4 py-2 border border-blue-500 text-blue-400 bg-slate-800 rounded-md hover:bg-slate-700 transition-colors duration-200 cursor-pointer", data: { turbo_frame: "tournaments_results" } %>
      <% end %>
    </div>
  </div>
<% end %> 