<div class="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 py-8">
  <div class="container mx-auto px-4 max-w-2xl">
    <h1 class="text-3xl font-bold text-slate-100 mb-6">🧪 Debug - Sistema de Búsqueda</h1>
    
    <!-- Status del sistema -->
    <div class="bg-slate-800 rounded-lg p-6 mb-6">
      <h2 class="text-xl text-slate-100 mb-4">📊 Estado del Sistema</h2>
      <div id="system-status" class="space-y-2">
        <div class="text-slate-400">🔄 Verificando sistema...</div>
      </div>
    </div>
    
    <!-- Test del controlador -->
    <div class="bg-slate-800 rounded-lg p-6 mb-6" data-controller="player-search">
      <h2 class="text-xl text-slate-100 mb-4">🎯 Test de Búsqueda</h2>
      
      <div class="space-y-4">
        <div>
          <label class="block text-slate-200 mb-2">Campo de búsqueda:</label>
          <input type="text" 
                 data-action="input->player-search#search"
                 data-player-search-target="searchInput"
                 placeholder="Escribe 'rodo' aquí..."
                 class="w-full px-4 py-2 bg-slate-700 text-slate-100 rounded-lg border border-slate-600">
        </div>
        
        <div data-player-search-target="results" 
             class="hidden bg-slate-700 rounded-lg p-4 border border-slate-600">
          <!-- Resultados aparecerán aquí -->
        </div>
        
        <div data-player-search-target="selectedPlayer" class="hidden">
          <div class="bg-green-900/30 border border-green-600 rounded-lg p-4">
            <div data-player-search-target="selectedPlayerInfo"></div>
            <button type="button" 
                    data-action="click->player-search#clearSelection"
                    class="mt-2 px-3 py-1 bg-red-600 text-white rounded text-sm">
              Limpiar Selección
            </button>
          </div>
        </div>
        
        <input type="hidden" data-player-search-target="playerIdField">
        
        <button type="button" 
                data-player-search-target="submitButton"
                disabled
                class="w-full px-4 py-2 bg-red-600 disabled:bg-slate-600 text-white rounded-lg">
          Botón Test (se habilitará al seleccionar)
        </button>
      </div>
    </div>
    
    <!-- Logs en tiempo real -->
    <div class="bg-slate-800 rounded-lg p-6">
      <h2 class="text-xl text-slate-100 mb-4">📝 Logs</h2>
      <div id="logs" class="bg-black text-green-400 p-4 rounded font-mono text-sm h-64 overflow-y-auto">
        <div>Sistema iniciando...</div>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const systemStatus = document.getElementById('system-status')
  const logs = document.getElementById('logs')
  
  function addLog(message) {
    const timestamp = new Date().toLocaleTimeString()
    const logEntry = document.createElement('div')
    logEntry.textContent = `[${timestamp}] ${message}`
    logs.appendChild(logEntry)
    logs.scrollTop = logs.scrollHeight
  }
  
  function updateStatus(message, type = 'info') {
    const statusEntry = document.createElement('div')
    const icon = type === 'success' ? '✅' : type === 'error' ? '❌' : '🔄'
    statusEntry.innerHTML = `<span class="text-slate-300">${icon} ${message}</span>`
    systemStatus.appendChild(statusEntry)
  }
  
  addLog('DOM cargado')
  updateStatus('DOM cargado correctamente')
  
  // Verificar Stimulus
  setTimeout(() => {
    if (window.Stimulus) {
      addLog('✅ Stimulus detectado')
      updateStatus('Stimulus está disponible', 'success')
    } else {
      addLog('❌ Stimulus NO detectado')
      updateStatus('Error: Stimulus no disponible', 'error')
    }
    
    // Verificar controlador
    const controller = document.querySelector('[data-controller="player-search"]')
    if (controller) {
      addLog('✅ Controlador player-search encontrado')
      updateStatus('Controlador de búsqueda registrado', 'success')
    } else {
      addLog('❌ Controlador player-search NO encontrado')
      updateStatus('Error: Controlador no encontrado', 'error')
    }
    
    // Test de endpoint
    addLog('🔄 Probando endpoint de búsqueda...')
    updateStatus('Probando conectividad con backend')
    
    fetch('/user_player_requests/search_players?query=test', {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
      credentials: 'same-origin'
    })
    .then(response => {
      addLog(`📡 Respuesta del servidor: ${response.status}`)
      if (response.status === 401) {
        updateStatus('Backend requiere autenticación (normal)', 'success')
      } else if (response.ok) {
        updateStatus('Backend responde correctamente', 'success')
      } else {
        updateStatus(`Backend error: ${response.status}`, 'error')
      }
    })
    .catch(error => {
      addLog(`❌ Error de conexión: ${error.message}`)
      updateStatus('Error de conectividad', 'error')
    })
    
  }, 500)
})
</script> 